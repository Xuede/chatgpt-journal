alter table "public"."journal_alex" drop constraint "journal_alex_pkey";

alter table "public"."test" drop constraint "test_pkey";

drop index if exists "public"."journal_alex_embedding_idx";

drop index if exists "public"."journal_alex_pkey";

drop index if exists "public"."test_pkey";

drop table "public"."journal_alex";

drop table "public"."test";

create table "public"."chat_agent" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "prompt" text not null,
    "avatar" text
);


alter table "public"."chat_agent" enable row level security;

create table "public"."conversation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "chat_agent" bigint not null,
    "name" text not null,
    "user_id" uuid not null,
    "session" uuid not null,
    "summary" text
);


alter table "public"."conversation" enable row level security;

create table "public"."conversation_message" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "conversation" bigint not null,
    "text" text not null,
    "user_id" uuid
);


alter table "public"."conversation_message" enable row level security;

CREATE UNIQUE INDEX chat_agent_name_key ON public.chat_agent USING btree (name);

CREATE UNIQUE INDEX chat_agent_pkey ON public.chat_agent USING btree (id);

CREATE UNIQUE INDEX conversation_message_pkey ON public.conversation_message USING btree (id);

CREATE UNIQUE INDEX conversation_pkey ON public.conversation USING btree (id);

alter table "public"."chat_agent" add constraint "chat_agent_pkey" PRIMARY KEY using index "chat_agent_pkey";

alter table "public"."conversation" add constraint "conversation_pkey" PRIMARY KEY using index "conversation_pkey";

alter table "public"."conversation_message" add constraint "conversation_message_pkey" PRIMARY KEY using index "conversation_message_pkey";

alter table "public"."chat_agent" add constraint "chat_agent_name_key" UNIQUE using index "chat_agent_name_key";

alter table "public"."conversation" add constraint "conversation_chat_agent_fkey" FOREIGN KEY (chat_agent) REFERENCES chat_agent(id) not valid;

alter table "public"."conversation" validate constraint "conversation_chat_agent_fkey";

alter table "public"."conversation" add constraint "conversation_session_fkey" FOREIGN KEY (session) REFERENCES auth.sessions(id) not valid;

alter table "public"."conversation" validate constraint "conversation_session_fkey";

alter table "public"."conversation" add constraint "conversation_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."conversation" validate constraint "conversation_user_id_fkey";

alter table "public"."conversation_message" add constraint "conversation_message_conversation_fkey" FOREIGN KEY (conversation) REFERENCES conversation(id) not valid;

alter table "public"."conversation_message" validate constraint "conversation_message_conversation_fkey";

alter table "public"."conversation_message" add constraint "conversation_message_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."conversation_message" validate constraint "conversation_message_user_id_fkey";

create policy "Enable select for authenticated users only"
on "public"."chat_agent"
as permissive
for select
to authenticated
using (true);


create policy "Individuals can view their own conversation."
on "public"."conversation"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Users can delete own conversations."
on "public"."conversation"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can insert their own conversations."
on "public"."conversation"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Users can update own conversations."
on "public"."conversation"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Individuals can view their own conversation_message."
on "public"."conversation_message"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Users can delete own conversation_message."
on "public"."conversation_message"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can insert their own conversation_message."
on "public"."conversation_message"
as permissive
for insert
to public
with check ((auth.uid() = user_id));




